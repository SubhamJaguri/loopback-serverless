/**
 * Generated by @openapi-codegen
 *
 * @version 1.0
 */
import * as reactQuery from "@tanstack/react-query";
import { useBackendContext, BackendContext } from "./backendContext";
import type * as Fetcher from "./backendFetcher";
import { backendFetch } from "./backendFetcher";
import type * as Schemas from "./backendSchemas";

export type GetOneBaseUserControllerUserPathParams = {
  id: number;
};

export type GetOneBaseUserControllerUserQueryParams = {
  /**
   * Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a>
   */
  fields?: string[];
  /**
   * Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a>
   */
  join?: string[];
  /**
   * Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a>
   *
   * @minimum 0
   * @maximum 1
   */
  cache?: number;
};

export type GetOneBaseUserControllerUserError = Fetcher.ErrorWrapper<undefined>;

export type GetOneBaseUserControllerUserVariables = {
  pathParams: GetOneBaseUserControllerUserPathParams;
  queryParams?: GetOneBaseUserControllerUserQueryParams;
} & BackendContext["fetcherOptions"];

export const fetchGetOneBaseUserControllerUser = (
  variables: GetOneBaseUserControllerUserVariables,
  signal?: AbortSignal
) =>
  backendFetch<
    Schemas.User,
    GetOneBaseUserControllerUserError,
    undefined,
    {},
    GetOneBaseUserControllerUserQueryParams,
    GetOneBaseUserControllerUserPathParams
  >({ url: "/user/{id}", method: "get", ...variables, signal });

export const useGetOneBaseUserControllerUser = <TData = Schemas.User>(
  variables: GetOneBaseUserControllerUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.User,
      GetOneBaseUserControllerUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useBackendContext(options);
  return reactQuery.useQuery<
    Schemas.User,
    GetOneBaseUserControllerUserError,
    TData
  >(
    queryKeyFn({
      path: "/user/{id}",
      operationId: "getOneBaseUserControllerUser",
      variables,
    }),
    ({ signal }) =>
      fetchGetOneBaseUserControllerUser(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UpdateOneBaseUserControllerUserPathParams = {
  id: number;
};

export type UpdateOneBaseUserControllerUserError =
  Fetcher.ErrorWrapper<undefined>;

export type UpdateOneBaseUserControllerUserVariables = {
  body: Schemas.User;
  pathParams: UpdateOneBaseUserControllerUserPathParams;
} & BackendContext["fetcherOptions"];

export const fetchUpdateOneBaseUserControllerUser = (
  variables: UpdateOneBaseUserControllerUserVariables,
  signal?: AbortSignal
) =>
  backendFetch<
    Schemas.User,
    UpdateOneBaseUserControllerUserError,
    Schemas.User,
    {},
    {},
    UpdateOneBaseUserControllerUserPathParams
  >({ url: "/user/{id}", method: "patch", ...variables, signal });

export const useUpdateOneBaseUserControllerUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.User,
      UpdateOneBaseUserControllerUserError,
      UpdateOneBaseUserControllerUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useBackendContext();
  return reactQuery.useMutation<
    Schemas.User,
    UpdateOneBaseUserControllerUserError,
    UpdateOneBaseUserControllerUserVariables
  >(
    (variables: UpdateOneBaseUserControllerUserVariables) =>
      fetchUpdateOneBaseUserControllerUser({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReplaceOneBaseUserControllerUserPathParams = {
  id: number;
};

export type ReplaceOneBaseUserControllerUserError =
  Fetcher.ErrorWrapper<undefined>;

export type ReplaceOneBaseUserControllerUserVariables = {
  body: Schemas.User;
  pathParams: ReplaceOneBaseUserControllerUserPathParams;
} & BackendContext["fetcherOptions"];

export const fetchReplaceOneBaseUserControllerUser = (
  variables: ReplaceOneBaseUserControllerUserVariables,
  signal?: AbortSignal
) =>
  backendFetch<
    Schemas.User,
    ReplaceOneBaseUserControllerUserError,
    Schemas.User,
    {},
    {},
    ReplaceOneBaseUserControllerUserPathParams
  >({ url: "/user/{id}", method: "put", ...variables, signal });

export const useReplaceOneBaseUserControllerUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.User,
      ReplaceOneBaseUserControllerUserError,
      ReplaceOneBaseUserControllerUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useBackendContext();
  return reactQuery.useMutation<
    Schemas.User,
    ReplaceOneBaseUserControllerUserError,
    ReplaceOneBaseUserControllerUserVariables
  >(
    (variables: ReplaceOneBaseUserControllerUserVariables) =>
      fetchReplaceOneBaseUserControllerUser({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type DeleteOneBaseUserControllerUserPathParams = {
  id: number;
};

export type DeleteOneBaseUserControllerUserError =
  Fetcher.ErrorWrapper<undefined>;

export type DeleteOneBaseUserControllerUserVariables = {
  pathParams: DeleteOneBaseUserControllerUserPathParams;
} & BackendContext["fetcherOptions"];

export const fetchDeleteOneBaseUserControllerUser = (
  variables: DeleteOneBaseUserControllerUserVariables,
  signal?: AbortSignal
) =>
  backendFetch<
    undefined,
    DeleteOneBaseUserControllerUserError,
    undefined,
    {},
    {},
    DeleteOneBaseUserControllerUserPathParams
  >({ url: "/user/{id}", method: "delete", ...variables, signal });

export const useDeleteOneBaseUserControllerUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DeleteOneBaseUserControllerUserError,
      DeleteOneBaseUserControllerUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useBackendContext();
  return reactQuery.useMutation<
    undefined,
    DeleteOneBaseUserControllerUserError,
    DeleteOneBaseUserControllerUserVariables
  >(
    (variables: DeleteOneBaseUserControllerUserVariables) =>
      fetchDeleteOneBaseUserControllerUser({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetManyBaseUserControllerUserQueryParams = {
  /**
   * Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a>
   */
  fields?: string[];
  /**
   * Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a>
   */
  s?: string;
  /**
   * Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a>
   */
  filter?: string[];
  /**
   * Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a>
   */
  or?: string[];
  /**
   * Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a>
   */
  sort?: string[];
  /**
   * Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a>
   */
  join?: string[];
  /**
   * Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a>
   */
  limit?: number;
  /**
   * Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a>
   */
  offset?: number;
  /**
   * Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a>
   */
  page?: number;
  /**
   * Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a>
   *
   * @minimum 0
   * @maximum 1
   */
  cache?: number;
};

export type GetManyBaseUserControllerUserError =
  Fetcher.ErrorWrapper<undefined>;

export type GetManyBaseUserControllerUserVariables = {
  queryParams?: GetManyBaseUserControllerUserQueryParams;
} & BackendContext["fetcherOptions"];

export const fetchGetManyBaseUserControllerUser = (
  variables: GetManyBaseUserControllerUserVariables,
  signal?: AbortSignal
) =>
  backendFetch<
    Schemas.GetManyUserResponseDto | Schemas.User[],
    GetManyBaseUserControllerUserError,
    undefined,
    {},
    GetManyBaseUserControllerUserQueryParams,
    {}
  >({ url: "/user", method: "get", ...variables, signal });

export const useGetManyBaseUserControllerUser = <
  TData = Schemas.GetManyUserResponseDto | Schemas.User[]
>(
  variables: GetManyBaseUserControllerUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.GetManyUserResponseDto | Schemas.User[],
      GetManyBaseUserControllerUserError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useBackendContext(options);
  return reactQuery.useQuery<
    Schemas.GetManyUserResponseDto | Schemas.User[],
    GetManyBaseUserControllerUserError,
    TData
  >(
    queryKeyFn({
      path: "/user",
      operationId: "getManyBaseUserControllerUser",
      variables,
    }),
    ({ signal }) =>
      fetchGetManyBaseUserControllerUser(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type CreateOneBaseUserControllerUserError =
  Fetcher.ErrorWrapper<undefined>;

export type CreateOneBaseUserControllerUserVariables = {
  body: Schemas.User;
} & BackendContext["fetcherOptions"];

export const fetchCreateOneBaseUserControllerUser = (
  variables: CreateOneBaseUserControllerUserVariables,
  signal?: AbortSignal
) =>
  backendFetch<
    Schemas.User,
    CreateOneBaseUserControllerUserError,
    Schemas.User,
    {},
    {},
    {}
  >({ url: "/user", method: "post", ...variables, signal });

export const useCreateOneBaseUserControllerUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.User,
      CreateOneBaseUserControllerUserError,
      CreateOneBaseUserControllerUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useBackendContext();
  return reactQuery.useMutation<
    Schemas.User,
    CreateOneBaseUserControllerUserError,
    CreateOneBaseUserControllerUserVariables
  >(
    (variables: CreateOneBaseUserControllerUserVariables) =>
      fetchCreateOneBaseUserControllerUser({ ...fetcherOptions, ...variables }),
    options
  );
};

export type CreateManyBaseUserControllerUserError =
  Fetcher.ErrorWrapper<undefined>;

export type CreateManyBaseUserControllerUserResponse = Schemas.User[];

export type CreateManyBaseUserControllerUserVariables = {
  body: Schemas.CreateManyUserDto;
} & BackendContext["fetcherOptions"];

export const fetchCreateManyBaseUserControllerUser = (
  variables: CreateManyBaseUserControllerUserVariables,
  signal?: AbortSignal
) =>
  backendFetch<
    CreateManyBaseUserControllerUserResponse,
    CreateManyBaseUserControllerUserError,
    Schemas.CreateManyUserDto,
    {},
    {},
    {}
  >({ url: "/user/bulk", method: "post", ...variables, signal });

export const useCreateManyBaseUserControllerUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      CreateManyBaseUserControllerUserResponse,
      CreateManyBaseUserControllerUserError,
      CreateManyBaseUserControllerUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useBackendContext();
  return reactQuery.useMutation<
    CreateManyBaseUserControllerUserResponse,
    CreateManyBaseUserControllerUserError,
    CreateManyBaseUserControllerUserVariables
  >(
    (variables: CreateManyBaseUserControllerUserVariables) =>
      fetchCreateManyBaseUserControllerUser({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type GetOneBasePostControllerPostPathParams = {
  id: number;
};

export type GetOneBasePostControllerPostQueryParams = {
  /**
   * Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a>
   */
  fields?: string[];
  /**
   * Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a>
   */
  join?: string[];
  /**
   * Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a>
   *
   * @minimum 0
   * @maximum 1
   */
  cache?: number;
};

export type GetOneBasePostControllerPostError = Fetcher.ErrorWrapper<undefined>;

export type GetOneBasePostControllerPostVariables = {
  pathParams: GetOneBasePostControllerPostPathParams;
  queryParams?: GetOneBasePostControllerPostQueryParams;
} & BackendContext["fetcherOptions"];

export const fetchGetOneBasePostControllerPost = (
  variables: GetOneBasePostControllerPostVariables,
  signal?: AbortSignal
) =>
  backendFetch<
    Schemas.Post,
    GetOneBasePostControllerPostError,
    undefined,
    {},
    GetOneBasePostControllerPostQueryParams,
    GetOneBasePostControllerPostPathParams
  >({ url: "/post/{id}", method: "get", ...variables, signal });

export const useGetOneBasePostControllerPost = <TData = Schemas.Post>(
  variables: GetOneBasePostControllerPostVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Post,
      GetOneBasePostControllerPostError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useBackendContext(options);
  return reactQuery.useQuery<
    Schemas.Post,
    GetOneBasePostControllerPostError,
    TData
  >(
    queryKeyFn({
      path: "/post/{id}",
      operationId: "getOneBasePostControllerPost",
      variables,
    }),
    ({ signal }) =>
      fetchGetOneBasePostControllerPost(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type UpdateOneBasePostControllerPostPathParams = {
  id: number;
};

export type UpdateOneBasePostControllerPostError =
  Fetcher.ErrorWrapper<undefined>;

export type UpdateOneBasePostControllerPostVariables = {
  body: Schemas.Post;
  pathParams: UpdateOneBasePostControllerPostPathParams;
} & BackendContext["fetcherOptions"];

export const fetchUpdateOneBasePostControllerPost = (
  variables: UpdateOneBasePostControllerPostVariables,
  signal?: AbortSignal
) =>
  backendFetch<
    Schemas.Post,
    UpdateOneBasePostControllerPostError,
    Schemas.Post,
    {},
    {},
    UpdateOneBasePostControllerPostPathParams
  >({ url: "/post/{id}", method: "patch", ...variables, signal });

export const useUpdateOneBasePostControllerPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Post,
      UpdateOneBasePostControllerPostError,
      UpdateOneBasePostControllerPostVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useBackendContext();
  return reactQuery.useMutation<
    Schemas.Post,
    UpdateOneBasePostControllerPostError,
    UpdateOneBasePostControllerPostVariables
  >(
    (variables: UpdateOneBasePostControllerPostVariables) =>
      fetchUpdateOneBasePostControllerPost({ ...fetcherOptions, ...variables }),
    options
  );
};

export type ReplaceOneBasePostControllerPostPathParams = {
  id: number;
};

export type ReplaceOneBasePostControllerPostError =
  Fetcher.ErrorWrapper<undefined>;

export type ReplaceOneBasePostControllerPostVariables = {
  body: Schemas.Post;
  pathParams: ReplaceOneBasePostControllerPostPathParams;
} & BackendContext["fetcherOptions"];

export const fetchReplaceOneBasePostControllerPost = (
  variables: ReplaceOneBasePostControllerPostVariables,
  signal?: AbortSignal
) =>
  backendFetch<
    Schemas.Post,
    ReplaceOneBasePostControllerPostError,
    Schemas.Post,
    {},
    {},
    ReplaceOneBasePostControllerPostPathParams
  >({ url: "/post/{id}", method: "put", ...variables, signal });

export const useReplaceOneBasePostControllerPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Post,
      ReplaceOneBasePostControllerPostError,
      ReplaceOneBasePostControllerPostVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useBackendContext();
  return reactQuery.useMutation<
    Schemas.Post,
    ReplaceOneBasePostControllerPostError,
    ReplaceOneBasePostControllerPostVariables
  >(
    (variables: ReplaceOneBasePostControllerPostVariables) =>
      fetchReplaceOneBasePostControllerPost({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type DeleteOneBasePostControllerPostPathParams = {
  id: number;
};

export type DeleteOneBasePostControllerPostError =
  Fetcher.ErrorWrapper<undefined>;

export type DeleteOneBasePostControllerPostVariables = {
  pathParams: DeleteOneBasePostControllerPostPathParams;
} & BackendContext["fetcherOptions"];

export const fetchDeleteOneBasePostControllerPost = (
  variables: DeleteOneBasePostControllerPostVariables,
  signal?: AbortSignal
) =>
  backendFetch<
    undefined,
    DeleteOneBasePostControllerPostError,
    undefined,
    {},
    {},
    DeleteOneBasePostControllerPostPathParams
  >({ url: "/post/{id}", method: "delete", ...variables, signal });

export const useDeleteOneBasePostControllerPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DeleteOneBasePostControllerPostError,
      DeleteOneBasePostControllerPostVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useBackendContext();
  return reactQuery.useMutation<
    undefined,
    DeleteOneBasePostControllerPostError,
    DeleteOneBasePostControllerPostVariables
  >(
    (variables: DeleteOneBasePostControllerPostVariables) =>
      fetchDeleteOneBasePostControllerPost({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetManyBasePostControllerPostQueryParams = {
  /**
   * Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a>
   */
  fields?: string[];
  /**
   * Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a>
   */
  s?: string;
  /**
   * Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a>
   */
  filter?: string[];
  /**
   * Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a>
   */
  or?: string[];
  /**
   * Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a>
   */
  sort?: string[];
  /**
   * Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a>
   */
  join?: string[];
  /**
   * Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a>
   */
  limit?: number;
  /**
   * Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a>
   */
  offset?: number;
  /**
   * Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a>
   */
  page?: number;
  /**
   * Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a>
   *
   * @minimum 0
   * @maximum 1
   */
  cache?: number;
};

export type GetManyBasePostControllerPostError =
  Fetcher.ErrorWrapper<undefined>;

export type GetManyBasePostControllerPostVariables = {
  queryParams?: GetManyBasePostControllerPostQueryParams;
} & BackendContext["fetcherOptions"];

export const fetchGetManyBasePostControllerPost = (
  variables: GetManyBasePostControllerPostVariables,
  signal?: AbortSignal
) =>
  backendFetch<
    Schemas.GetManyPostResponseDto | Schemas.Post[],
    GetManyBasePostControllerPostError,
    undefined,
    {},
    GetManyBasePostControllerPostQueryParams,
    {}
  >({ url: "/post", method: "get", ...variables, signal });

export const useGetManyBasePostControllerPost = <
  TData = Schemas.GetManyPostResponseDto | Schemas.Post[]
>(
  variables: GetManyBasePostControllerPostVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.GetManyPostResponseDto | Schemas.Post[],
      GetManyBasePostControllerPostError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useBackendContext(options);
  return reactQuery.useQuery<
    Schemas.GetManyPostResponseDto | Schemas.Post[],
    GetManyBasePostControllerPostError,
    TData
  >(
    queryKeyFn({
      path: "/post",
      operationId: "getManyBasePostControllerPost",
      variables,
    }),
    ({ signal }) =>
      fetchGetManyBasePostControllerPost(
        { ...fetcherOptions, ...variables },
        signal
      ),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type CreateOneBasePostControllerPostError =
  Fetcher.ErrorWrapper<undefined>;

export type CreateOneBasePostControllerPostVariables = {
  body: Schemas.Post;
} & BackendContext["fetcherOptions"];

export const fetchCreateOneBasePostControllerPost = (
  variables: CreateOneBasePostControllerPostVariables,
  signal?: AbortSignal
) =>
  backendFetch<
    Schemas.Post,
    CreateOneBasePostControllerPostError,
    Schemas.Post,
    {},
    {},
    {}
  >({ url: "/post", method: "post", ...variables, signal });

export const useCreateOneBasePostControllerPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Post,
      CreateOneBasePostControllerPostError,
      CreateOneBasePostControllerPostVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useBackendContext();
  return reactQuery.useMutation<
    Schemas.Post,
    CreateOneBasePostControllerPostError,
    CreateOneBasePostControllerPostVariables
  >(
    (variables: CreateOneBasePostControllerPostVariables) =>
      fetchCreateOneBasePostControllerPost({ ...fetcherOptions, ...variables }),
    options
  );
};

export type CreateManyBasePostControllerPostError =
  Fetcher.ErrorWrapper<undefined>;

export type CreateManyBasePostControllerPostResponse = Schemas.Post[];

export type CreateManyBasePostControllerPostVariables = {
  body: Schemas.CreateManyPostDto;
} & BackendContext["fetcherOptions"];

export const fetchCreateManyBasePostControllerPost = (
  variables: CreateManyBasePostControllerPostVariables,
  signal?: AbortSignal
) =>
  backendFetch<
    CreateManyBasePostControllerPostResponse,
    CreateManyBasePostControllerPostError,
    Schemas.CreateManyPostDto,
    {},
    {},
    {}
  >({ url: "/post/bulk", method: "post", ...variables, signal });

export const useCreateManyBasePostControllerPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      CreateManyBasePostControllerPostResponse,
      CreateManyBasePostControllerPostError,
      CreateManyBasePostControllerPostVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useBackendContext();
  return reactQuery.useMutation<
    CreateManyBasePostControllerPostResponse,
    CreateManyBasePostControllerPostError,
    CreateManyBasePostControllerPostVariables
  >(
    (variables: CreateManyBasePostControllerPostVariables) =>
      fetchCreateManyBasePostControllerPost({
        ...fetcherOptions,
        ...variables,
      }),
    options
  );
};

export type QueryOperation =
  | {
      path: "/user/{id}";
      operationId: "getOneBaseUserControllerUser";
      variables: GetOneBaseUserControllerUserVariables;
    }
  | {
      path: "/user";
      operationId: "getManyBaseUserControllerUser";
      variables: GetManyBaseUserControllerUserVariables;
    }
  | {
      path: "/post/{id}";
      operationId: "getOneBasePostControllerPost";
      variables: GetOneBasePostControllerPostVariables;
    }
  | {
      path: "/post";
      operationId: "getManyBasePostControllerPost";
      variables: GetManyBasePostControllerPostVariables;
    };
